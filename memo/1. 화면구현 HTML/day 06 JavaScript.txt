1. 선택문
	- 값의 일치 -> 선택문
	switch(키워드) {
		case "값1" :
			// 값1과 키워드가 일치할 때 실행되는 코드
			break; -> 실행 중단
		case "값2" :
			// 값2와 키워드가 일치할 때 실행되는 코드
		
		default :
			모든 값에 일치하지 않을 때 default값을 실행한다.
}
	
2. 반복문
1) while

while (조건식) {
	// 조건식이 참 일때 반복되는 코드
}
var num = 1; - 초기값
var total = 0;

while(num <= 100) { - 조건식
    total += num;
        
    num++; - 증가식
}
100
total = 5050

2) do ~ while
do {
	// 조건식이 참 일때 반복되는 코드
	// 조건식이 거짓이라도 한번은 실행된다

} while(조건식);

var num = 1 - 초기값
total = 0;

do {
    total += num ;
    num++; -증가식
} while(num <= 100); - 조건식
100
total = 5050

3) for - 반복횟수가 정해진 경우 주로 사용한다.

for (초기화식; 조건식; 증감식) {
	// 조건이 참 일때 반복되는 코드
}

순서 - index ( i ) 0번부터 시작하는 순서
- 변수명 i
	i, j, k ....
	
중첩 반복문
- 반복문 안에 반복문

반복중단
	break
	
현재 반복 중단 -> 새로 반복 시작 : 건너뛰기
	continue
	
while(num <= 100) {
	if (num % 2 == 1) {
		num++;
		continue;
		}
	
2, 4, 6, 8, 10 ... -> 2n

1, 3 , 5, 7, 9 ... -> 2n + 1

ECMAScript 6 부터 추가된 데이터 타입 (2015년도 이후)
ECMAScript 6+
es6+(esNext)

1. 심벌(Symbol)
Symbol("값") : 값이 같아도 중복이 안되는 값
Symbol.for("이름") : 동일 심볼을 조회해서 사용

2. 템플릿 리터럴

엔터키 -> \r\n


메타 문자 - 기능
\n -> new line : 줄개행
\r -> 커서를 가장 앞에둔다
\t -> 탭키
\b -> 백스페이스

- 자연스러운 문장 입력
`  `  - 역따옴표


3. 보간 표현식(placeholder)
- 템플릿 리터럴 (` `)안에 쓴다
- ${변수, 연산식, 간단한 함수호출}

ECMAScript 5 (2015년도 이전)

객체 리터럴
객체(Object - 사물, 대상)
속성
행위(함수)

1. 객체 리터럴로 객체 생성하기
{ } -> 객체

{
	속성명 : 값(원시타입, 객체),
	속성명 : 값,
	...
}

변수.속성명 / 변수[속성명]
변수.속성명 = 대입; <-- 이미 속성이 있는 경우만 바뀐다.

2. 프로퍼티(속성) 추가와 삭제
추가 - 없는 속성에 값을 대입
삭제 - delete 변수.속성명;

JSON(JavaScript Object Notation - 자바스크립트 객체 표기법)
- 문자열 형태로
{ "속성명" : "값" }

3. in 연산자로 프로퍼티가 있는지 확인하기

in -> 객체 안에 어떤 속성이 포함되어 있는지 확인

for ...in


4. 메서드(함수)
함수 = 기능

2x + 1 = y;


5. 객체는 참조 타입

원시타입 자료형
숫자, 문자, 논리값, undefined, null

참조변수 - 객체를 참조하는 변수

변수 = 값(원시타입, 객체)


함수
1. 함수 선언문으로 함수 정의하기

function 함수이름(매개 변수명, ... ) {
	// 연산
	
	return 값;
}

2. 함수 호출

	함수명(값);
	
3. 매개변수
4. 함수 선언문의 끌어올림

5. 값으로서의 함수