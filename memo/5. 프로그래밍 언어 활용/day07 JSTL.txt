JSTL(JSP Standard Tag Library)
커스텀 태그의 일종 - 외부 라이브러리
jstl 1.2

코어(core) 라이브러리 - 제어문, 반복문, 변수 ...
<%@ taglig prefix="c" uri="http://java.sun.com/jstl/core" %>

1. <c:set>
	- EL식 속성값으로 추가
	- var : 변수명
	- value : 값 - 기본값 - 순자, 문자, 자바 변수, EL식 변수
	- scope : 속성의 범위 결정
		- page : 기본값(pageContext)
		- request : request범위
		- session : session 범위
		- application : servletContext 범위
			ex) <c:set var="num1" value="100" scope="request"/>
----------------------------------------------------------------------------------	
2. <c:remove>
	- EL식 속성값을 제거
	- var 변수명
	- scope를 명시하지 않으면 전 범위의 EL식 변수를 제거
	
	- scope
		: page
		: request
		: session
		: application
		
		ex) <c:remove var="num" scope="request" />
----------------------------------------------------------------------------------	
3. <c:if> : 조건문 (if)
		- test : EL식으로 조건을 처리한다
				- true, false 같은 상수는 그냥 사용 가능하다
		참고)
			else는 없다
			
			ex)<c:set var="num" value="10" />	
				<c:if test="${num > 5}">
					${num}은 5보다 크다.
				</c:if>
----------------------------------------------------------------------------------
4. <c:choose> : 다중 조건문(if, elseif, else)

	<c:when> : (if, elseif)
	<c:otherwise> : (else)
	
		ex) <c:set var="age" value="25" />
			<c:choose>
				<c:when test="${age < 8}">
					유치원생
				</c:when>
				<c:when test="${age < 14}">
					초등학생
				</c:when>
				<c:when test="${age < 17}">
					중학생
				</c:when>
				<c:when test="${age < 20}">
					고등학생
				</c:when>
				<c:otherwise>
					성인
				</c:otherwise>
			</c:choose>
----------------------------------------------------------------------------------	
5. <c:forEach> : 반복문
	- 배열
	- 컬렉션(Collection - List, Set)
	- Iterator
	- ,로 구분한 문자열
	- 횟수가 정해진 반복
		- items : EL식 변수
		- begin : 시작번호
		- end : 종료번호
		- var : 현재 번호
		- step : 증감 단위 - 기본값 1
		
			- ex)  <c:forEach var="num" begin="1" end="10" step="2">
						<h1>${num}. 반복</h1>
					</c:forEach>
	
	varStatus : 반복 상태 값
				.index : 0부터 시작하는 순서 번호
				.count : 1부터 시작하는 순서 번호
				.first : 첫번째 인지 확인
				.last : 마지막 인지 확인 
				.current : 현재 반복 요소
				
			- ex) <ul>
						<c:forEach var="item" items="${items}" varStatus="status">
							<li>
								${status.index} / ${status.count} /
								first : ${status.first} / last : ${status.last} /
								${item.subject} / ${item.poster}
							</li>
							<li>
								${status.current.subject} / ${status.current.poster}
							</li>
						</c:forEach>
					</ul>
----------------------------------------------------------------------------------					
6. <c:forTokens> : 문자열 자르기
	- StringTokenizer
	
	- items : "문자열"
	- delims : "패턴" 
	- var : 패턴으로 분리된 문자열
		
		- ex : <c:forTokens var="item" items="사과, 배# 오렌지, 감_ 멜론" delims=",#_">
					${item}<br>
				</c:forTokens>
	
----------------------------------------------------------------------------------
7. <c:catch> : 예외처리

	ex) <c:catch var="e">
		<%
			String str = null;
			str.toUpperCase();
		%>
		</c:catch>
		<c:if test="${e != null}">
			<%-- ${e.getMessage()} --%>
			${e.message}
		</c:if>

----------------------------------------------------------------------------------
8. <c:redirect> 
	- HttpServletResponse
		- sendRedirect
		
		- url : 주소
		
		<c:param name="..." value="..." /> -> GET 요청 데이터 추가
		
			ex) <c:redirect url="Ex09.jsp">
					<c:param name="key1" value="value1" />
					<c:param name="key2" value="value2" />
				</c:redirect>

----------------------------------------------------------------------------------				
9. <c:import>
	- <jsp:include >와 비슷하다
	
	차이점
		액션태그의 include
		(<jsp:include page="..." ...>)
			- 서버자원 (jsp, 서블릿, html, text ...)
			
		<c:import ...>
			- 현재 서버자원 + 외부 서버자원 추가 가능
			- url : 버퍼에 추가할 자원에 대한 경로
			- var : 출력 결과를 EL식 변수에 담을 수 있다
			
----------------------------------------------------------------------------------
10. <c:url>
		HttpServletRequest request
			- String getContextPath()
		
	- Context 경로를 포함한 주소 반환
	- value : 주소
	- var : 변환된 주소 값을 가질 수 있는 EL식 변수
	- 쿼리스트링 값 추가
		<c:param name='...' value='...' />
	
	
		ex) <%
				String contextPath = request.getContextPath();
				//out.write(contextPath);
			%>
			<c:url var="url1" value="/jstl/Ex11.jsp" />
			<a href="<%=contextPath%>/jstl/Ex11.jsp">이동</a>
			<a href="${url1}">이동</a>
			
----------------------------------------------------------------------------------

11. <c:out> : 출력
		- HTML 출력 -> 문자열 출력 (태그가 그대로 출력)
							-> escape 처리
							- 자바 스크립트 해석 방지
							- 자바 스크립트는 <script> 태그에서만 번역 실행
							
		- excapeXml
					true : 태그 문자 -> 특수문자
					false : 태그 그대로 해석한다
		
----------------------------------------------------------------------------------

포매팅(fmt) 라이브러리 - 형식화 (날짜, 숫자, 지역화 - 다국어, 시간 등)
<%@ taglib="fmt" uri="java.sun.com/jsp/jstl/fmt"
1. <fmt: formatDate> : 날짜의 형식화
	- Date 객체
	- type
			- date : 날짜
			- time : 시간
			- both : 날짜 시간
			
			- dateStyle : short | medium | long | full
			- timeStyle : short | medium | long | full
			
			- pattern : 직접 출력 패턴
			
				ex) <%
						Date date = new Date();
					 %>
						<c:set var="date" value="<%=date%>" />

						<fmt:formatDate value="${date}" type="date" /><br>
						<fmt:formatDate value="${date}" type="time" /><br>
						<fmt:formatDate value="${date}" type="both" /><br>

						<fmt:formatDate value="${date}" type="both" dateStyle="full" timeStyle="full"/><br>
						<fmt:formatDate value="${date}" type="both" dateStyle="long" timeStyle="long"/><br>
						<fmt:formatDate value="${date}" type="both" dateStyle="medium" timeStyle="medium"/><br>
						<fmt:formatDate value="${date}" type="both" dateStyle="short" timeStyle="short"/><br>
						
						<fmt:formatDate value="${date}" type="both" pattern="yy/MM/dd HH:mm (E) "/><br>
				
----------------------------------------------------------------------------------			
2. <fmt:formatNumber>
	java.text 패키지
		- 형식화 클래스
		- DecimalFormat
		
		- value="값"
		- 지역화에 따른 형식화(기본)
		
		- groupingUsed : true : 세자리마다 ( , ) 로 구분
							false : 구분 X
								
		- pattern : "형식"
			- #,#####.##.....
		- type 
			- curreny : 통화
			- percent : 퍼센트
			
				ex) <fmt:formatNumber value="100000000000000000" groupingUsed="false"/><br>

					<fmt:formatNumber value="1000000000.12" pattern="0,000.000000" /><br>
					<fmt:formatNumber value="1000000000.12" pattern="'#'#,##.######" /><br>
					
					<fmt:setLocale value="ja_jp" />
					<fmt:formatNumber value="20000" type="currency" /><br>
					<fmt:formatNumber value="0.25" type="percent" />

----------------------------------------------------------------------------------	

3. <fmt:setLocale> : 지역화
	java.util.Locale
		
		- 요청 헤더 : Accept-Language
			-> 지역화 Locale 객체 생성
		
		- value
			- 언어코드_국가코드
			- 언어코드
			value="ko_kr" value ="ko"
			value="ja" value="ja_jp"
			value="zh_CN"
			
				ex) <%
						Date date = new Date();
						pageContext.setAttribute("date", date);
					 %>


					<h3>대한민국</h3>
					<fmt:setLocale value="ko" />
					<fmt:formatDate value="${date}" />

					<h3>중국</h3>
					<fmt:setLocale value="zh" />
					<fmt:formatDate value="${date}" />

					<h3>일본</h3>
					<fmt:setLocale value="ja" />
					<fmt:formatDate value="${date}" />
			
---------------------------------------------------------------------------------------------------------
	
4. <fmt:timeZone>
		
		<fmt:timeZone>
			
		</fmt:timeZone>
	
		- value : 시간대 ID
				Asia/Seoul

5. <fmt:setTimeZone>
	 ex) <%
				Date date = new Date();
				pageContext.setAttribute("date", date);
			%>

			<h3>대한민국/서울</h3>
			<fmt:setTimeZone value="Asia/Seoul" />
				<fmt:formatDate value="${date}" type="both" dateStyle="full" timeStyle="full" />

			<h3>필리핀/마닐라</h3>
			<fmt:setTimeZone value="Asia/Manila" />
				<fmt:formatDate value="${date}" type="both" dateStyle="full" timeStyle="full" />

			<h3>미국/뉴욕</h3>
			<fmt:setTimeZone value="America/New_York" />
				<fmt:formatDate value="${date}" type="both" dateStyle="full" timeStyle="full" />

6. <fmt:setBundle>
7. <fmt:bundle> : <fmt:bundle> ~ </fmt:bundle> 내에서만 사용 가능
	- basenames="메세지 파일 경로"
	- 메세지
		아이디, 비밀번호
		이메일
	- java.text.MessageFormat
	- 다국어 구현이 가능하다
	- 메세지 파일 경로 설정
		(properties 파일)
		
	*클래스패스(classPath)
		- 클래스 파일을 인식할 수 있는 경로
		- src/main/java
		- src/main/resources
			- 정적 자원들(css, js, 이미지 등..)
			- 설정 파일(xml, properties, yml)
			- 메세지 파일(properties)
			
		- src/test/java
		- src/test/resources
		- target
		- src/main/webapp/WEB-INF/lib
		- src/main/webapp/WEB-INF/classes
		
	참고) properties 파일 형식
			키 = 값
			키 = 값
		java.util.ResourceBundle
		
	<fmt:message key="값" />
	
	치환 코드가 있는 경우 {숫자} : 순서대로
		<fmt:message key="값">
			<fmt:param>값</fmt:param>
			<fmt:param>값</fmt:param>
		</fmt:message>
	
8. <fmt:requestEncoding value="utf-8" />

	ex) <%
			//request.setCharacterEncoding("UTF-8");
		%>
		<fmt:requestEncoding value="UTF-8" />
		${param.name}


함수(function) 라이브러리
- 문자열 가공
- String 클래스의 편의 기능과 비슷하다
- EL식 내에서 사용한다