*액션태그
<jsp:.... />
- 서버나 클라이언트에게 어떤 행동을 하도록 명령하는 태그
- 스크립트 태그, 주석, 디렉티브 태그와 함께 JSP 페이지를 구성

	* 버퍼 = 여분의 임시 메모리 공간.
		- 키보드를 통해서 입력하는 데이터는 실행중인 프로그램으로 바로 읽혀지는 것이 아니라, 
		  일단은 입력 버퍼라는 곳에 저장이 된다는 것을 알 수 있다.
		  그리고 나서 입력 버퍼에 존재하는 데이터가 프로그램으로 이동하는 것이다.
		  
		-  키보드를 통해서 입력하는 데이터는 실행중인 프로그램으로 바로 읽혀지는 것이 아니라, 일단은 입력 버퍼라는 곳에 저장이 된다는 것을 알 수 있다.
		   그리고 나서 입력 버퍼에 존재하는 데이터가 프로그램으로 이동하는 것이다.


1. forward : 다른 페이지로의 이동, 실제 주소는 바뀌지 않고 body 내용만 이동 
<jsp:forward page="페이지 경로" />
	- 페이지 이동이 아니다.
	- 출력 버퍼의 통제
	- 기존에 있던 출력 버퍼를 비우고 <jsp:forward page="" />
												에 정의된 페이지 경로의 출력 내용을 버퍼로 교체 후 출력 완료

	참고) 응답헤더의 location: 주소 -> 브라우저의 주소를 변경하고 이동한다

	응답 헤더 location: 주소 -> 브라우저의 주소를 변경하고 이동한다 (페이지 이동)
	HttpServletResponse
		response.sendRedirect("주소") // 주소를 변경한다


2. include : 
<jsp:include page="페이지 경로" />
	- 기존 버퍼를 유지한다
	- <jsp:include page="페이지 경로" ... 출력물을 버퍼에 추가한다
	- 나머지 출력을 버퍼에 추가한다
	- 버퍼의 통제  
	- forward, include가 요청을 처리하는 동안 버퍼에 추가
		- 요청 데이터를 추가, 조회
			- HttpServletRequest request
			- getParameter -> <jsp:param -> 요청 데이터 추가
	
	참고) 디렉티브 태그 <%@ include file="파일경로" %>
		-> 물리적으로 소스에 통합, 액션태그 include와 다르다
		
	
	*java.net.URLEncoder - url encoding
	*java.net.URLDecoder - url decoding
	
	application/x-www-form-urlencoded	
		
		
	*RequestDispatcher
		- forward : <jsp:forward>와 동일 기능
		- include : <jsp:include>와 동일 기능
	
	
	*MVC
	- M(Model) : 비즈니스 로직 - 기능(Service) 
					- DTO(Data Transfer Object) : 데이터 전달 객체
					- VO(Value Object) : 데이터 전달 객체
					- DAO(Data Access Object) : 데이터 접근 객체
					- Validator ..
					
	
	- V(View) : 처리 결과 출력
	
	- C(Controller) : 요청과 응답
			요청 : 적절한 요청 처리의 모델을 찾는다 -> 모델에서 처리한다 -> 응답
			- 요청을 처리할 적절한 서비스(모델)을 찾아서 응답을 할 수 있는 뷰를 연결한다
	

3. useBean : JSP 페이지에 자바빈즈를 설정
	Bean : 자바객체
		<jsp:useBean id="자바 빈(객체) 식별 이름" class="패키지명을 포함한 자바 클래스 명" scope=""/>
		
		-> id="이름" : 참조변수, EL식 속성(변수)
		-> scope
					- page (기본값)
					- request
					- session
					- application

- EL식 : ${식}
	- 사용하는 변수 : 속성(Attribute)
	
	- 데이터 전달용 객체(DTO,VO)
	- 반드시 기본 생성자 형태로만 사용한다
	
	- 속성을 관리하는 객체 - jsp 페이지 내에서 출력용도로 주로 쓰인다
		- PageContext pageContext : 현재 페이지
		
		- HttpServletRequest request : 요청 처리 동안
		
		- HttpSession session : 개인화된 서비스 제공 기술
		
		- ServletContext application : 어플리케이션이 실행되는 동안 
		
			속성값을 지정하는 메서드
				setAttribute(String name, Object value);
				
			속성값을 조회하는 메서드
				getAttribute(String name)
			
			속성값을 제거하는 메서드
				removeAttribute(String name)
				
		범위
			pageContext < request < session < application
				- 속성값의 범위는 좁을수록 우선도가 높다
					pageContext > request > session > application
					
	EL식 속성 범위 내장 객체 ***
		1) pageScope : pageContext범위의 속성값 조회
		2) requestScope : request 범위의 속성값 조회
		3) sessionScope : session 범위의 속성값 조회
		4) applicationScope : application 범위의 속성값 조회
		
4. setProperty
5. getProperty


6. param