*서블릿
- Java를 기반으로 하는 유일한(java) 웹 어플리케이션 프로그래밍 기술

1. 서블릿 클래스 작성하기
	- javax.servlet-api 인터페이스
	- javax.servlet.jsp-api 인터페이스

API(Application Programming Interface)
- 반드시 구현체가 있다
<scope>provided</scope>


javax.servlet.http
	HttpServlet 을 상속 받으면, 서블릿 클래스가 된다 
		- 요청에 대한 처리, 응답에 대한 처리에 관한 메서드가 정의되어 있다
			- doGet
			- doPost
			- doDelete
			- doPut ...
				- 매개변수가 HttpServletRequest, HttpServletResponse
				
					HttpServletRequest : 요청(브라우저) // 조회 관련, 요청이기 때문에 수정(Set)은 불가능
						- 요청에 대한 정보를 확인할 수 있는 메서드가 정의되어 있다
						- 요청 데이터를 확인할 수 있는 메서드가 정의되어 있다
							- ServletInputStream()
							- PrintReader()
							- String getParameter(String name) (요청 데이터)
							- String[] getParameterValue(....)
						
					HttpServletResponse : 응답(서버) // add(), get(), set() 모두 가능하다
						- 응답 상태(코드), 응답 데이터의 종류를 정의할 수 있는 메서드가 정의되어 있다
						- 응답 (출력) 관련 메서드가 정의되어 있다
							- ServletOutStream()
							- PrintWriter()
						
					
				- 컨트롤러(Controller) : 요청과 응답의 중재자
				
	/hello -> 서블릿 web.xml -> HelloServlet.class -> 객체생성 -> doGet() 호출
				

2. 웹 브라우저로부터 데이터 입력 받기

@WebServlet("주소")

서블릿 생명주기(Life Cycle)
웹서버 실행 -> 서블릿 객체 생성 -> init()(최초 한번) -> 요청 처리 메서드(요청시 마다) -> destroy()(최후한번)

init() : 초기 설정을 할 때
		설정 값이 필요한 경우가 있다
		
init(ServletConfig config)
	ServletConfig
		: getInitParameter(String name)
		
	- 설정
		web.xml
			<servlet>
			
				<init-param>
					<param-name>이름</param-name>
					<param-value>값</param-value>
				</init-param>
			</servlet>

3. 필터(공통기능), 래퍼클래스(필터의 공통기능를 재정의)

필터 - 요청과 응답 사이에서 필터링 // 공통기능, 주로 인증, 관리자 페이지에서 사용
	- Filter 인터페이스를 구현하면 필터 클래스가 된다
		- doFilter(req, resp, chain) - 필터링 설정 메소드
		
web.xml
<filter>
	<filter-name>...</filter-name>
	<filter-class>...</filter-class>
</filter>
<filter-mapping>
	<filter-name>...</filter-name>
	<url-pattern>...</url-pattern>
</filter-mapping>


HttpServletRequestWrapper 클래스 : HttpServletRequest 인터페이스 기본 구현체
HttpServletResponseWrapper 클래스 : HttpServletResponse 인터페이스 기본 구현체

쿠키(보안에 민감한 데이터) -> 암호화

HttpServletResponse
	addCookie
		-> HttpServletResponseWrapper에서 재정의
		직접 정의하지 않고 요청 전 공통기능을 위 클래스에서 정의하여 사용

복호화(부호화 되기전 상태, 읽을 수 있는) -> 쿠키 조회		

HttpServletRequest
	getCookie
		-> HttpServletRequestWrapper에서 재정의
		직접 정의하지 않고 응답 후 공통기능을 위 클래스에서 정의하여 사용
