연산자
	10 + 20
	- 항 : 연산에 사용되는 값
		- 단항연산
		- 이항연산 - 값이 논리값 (비교연산, 논리연산)
		- 삼항연산
		
	-연산자 : 연산에 사용되는 기호
	
	1) 대입연산자
		int num1 = 10;
		
		- 값을 저장한다
		
		int result = 10 + 20;
		
		- 연산의 우선순위가 가장 낮은 연산자
		
	2) 부호 연산자
		( +, - )
		
		- : 부호 반전
			음수 -> 양수
			양수 -> 음수
		
	3) 산술 연산자
		(+, -, *, /, %)
		
		% - 나머지 연산자
		- 나머지는 나누는 수 보다 항상 작은 수 반복
		/, *, %, 이 +, - 보다 우선도가 높다
		( ) : 우선순위 강제 적용(다른 연산자도 적용이 된다)
		
	4) 증가 감소 연산자 - 단항 연산
		++ : 1씩 증가
		 --  : 1씩 감소
		 
	5) 비교 연산자 - 이항 연산
		>, <, >=, <=, ==, !=
		== (같다)
		!= (다르다)
		
		- 연산의 결과가 논리값
			(true, false) - 조건문, 반복문			
	
	6) 논리 연산자 - 이항 연산
		AND 연산 - && = 교집합  
		true && true -> true
		- 두항이 참이여야 참
		
		OR 연산 - || = 합집합  
		true || true -> true
		true || false -> true
		false || true -> true
		-true 두항중 하나만 참이어도 참
		
		NOT 연산 - !
						-> 참 -> 거짓
						-> 거짓 -> 참
		
		AND, OR -> 비교 연산자와 함께 사용되는 경우가 많다.
		
		비교연산자 우선순위가 논리 연산자 보다 높다.
		1. 비교 2. 논리 3. 대입
		
		- 단락 회로 평가
		
	7) 복합 대입 연산자
		= + 다른 연산자(산술 연산자, ....)
		
		ex) 증감 연산자 num = num + 1; // num++, ++num
		
		num = num + 2; // num = + 2;
		
		num = num * 3 // num = * 3;
		
	8) 삼항 조건 연산자
	
	조건식(참과거짓) ? 참일때 : 거짓일 때;
	(1항)		  			  (2항)        (3항)

	- 간단한 조건문을 대체
	
	문자열을 사용하는 자료형
	
	형식 - String str(변수명) = "문장";
	
	*문자열에서 +는 문자열 결합
	ex) "abc" + "def" = "abcdef";
		"abc" + 100 = "abc100";
	 char ch = 'A' - 문자
	 
* 연산자의 우선순위
대입연산자(=)  <  논리연산자  <  비교연산자  <   {...}  <  [...]  <  (...)
	

조건문 - 참, 거짓을 판별

	if (조건식 - 논리값(비교, 논리 연산자)) {
	// 참일때 실행되는 코드
} else if (조건식2) {
	// if의 조건식이 거짓이고, 조건식2가 참일 때
} else if(조건식3) {
	// 조건식2가 거짓이고, 조건식3이 참일 때
} else {
	// 조건식이 거짓일 때 코드
}


선택문
switch, case, break, default

switch case 
ex) int rank = 4;
        switch (rank) {
            case 1:
                System.out.println("금메달");
                break;
            case 2:
                System.out.println("은메달");
                break;
            case 3:
                System.out.println("동메달");
                break;
            default :
                System.out.println("입상");
        }


반복문 - 조건하에서 반복

*while(조건식) { -> 조건식을 먼저 체크 false면 실행 X
	// 조건식이 참일때 반복 수행되는 코드
}

ex) 1 ~ 100 까지 수를 더하기
	필요요소 : (초기값 num = 1), (증가값 num++), (조건식 total += num;)
	int total = 0, num = 1; // 쉼표로 자료형을 명시하지 않아도 다른 변수를 사용가능

        while(num <= 100) {
            total += num; // total = total + num;
            num++; // num = num + 1;
        }
        System.out.println("합계 : " + total);
		
*do { -> 코드를 먼저 체크, 최초 한번은 실행된다
	// 조건식이 참일때 반복 수행되는 코드
} while(조건식);

ex) 1 ~ 100 까지 수를 더하기
	int total = 0, num = 1;

        do {
            total += num;
            num++;
        } while (num <= 100);
        System.out.println("합계 : " + total);

** for (초기화식; 조건식; 증감식; ) {
	// 조건식이 참일때 반복되는 코드
};

ex) 1 ~ 100 까지 수를 더하기
	int total = 0;
        for (int i = 1; i <= 100; i++) {
            total += i;
        }
        System.out.println("합계 :" + total);

 for문의 특징		
- 횟수가 정해져 있는 반복문에서 많이 쓰인다.
- 순서가 있다.
- index -> i // 0부터 시작하는 순서 i를 변수로 쓴다

반복문(while, do~while, for)
1)break - 반복 중단

ex) int total = 0;
        for (int i = 1; i <= 100; i++) {
            total += i;
            if(i == 50) {
                break; // 반복 중단
            }
        }
        System.out.println("합계 :" + total);
		
ex2) 1~100 중 짝수만 더하기
	int total = 0;
        for (int i = 1; i <= 100; i++) {
            if (i % 2 == 0) { // 2로 나눈 나머지가 0이면 짝수
            total += i;
            }
        }
        System.out.println("합계 : " + total);
		
ex3) continue를 이용한 짝수 더하기
	int total = 0;
        for (int i = 1; i <= 100; i++) {
            if (i % 2 == 1) { // 홀수를 건너뛰면 짝수
                continue;
            }
            total += i;
        }
        System.out.println("합계 : " + total);

2) continue - 현재 반복을 중단, 새로운 반복 시작 : 건너뛰기

중첩 반복문

반복문 안에 반복문
for - for
for - while
for - do while
while - for
while - while

ex) 구구단

	for (int i = 2; i <= 9; i++) {
            System.out.println("======" + i + "단 ======");
            for (int j = 1; j <= 9; j++) {
                System.out.println(i + "X" + j + "=" + (i*j));
            }
        }