실습환경 구축
에디터 - 인텔리J

Java - Write Once, Run Everywhere
C, C++ : OS에 컴파일이 종속, OS마다 다른 라이브러리

Java -> 컴파일 -> class (JVM 인식할 수 있는 중간언어)
JVM (Java Virtual Machine - 자바가상머신)

.java -> 자바코드 -> 컴파일 -> .class(중간언어) -> JVM 실행 -> 바이트변환 -> 실행



변수와 자료형

1. 컴퓨터는 데이터를 어떻게 표현할까?
2. 10진수와 2진수
3. 부호있는 수를 표현하는 방법

변수란?
- 공간(메모리)의 이름

1. 변수 선언하고 값 대입하기

변수 선언 -> 변수의 이름을 짓는 것
자료형 변수명;

2. 변수 초기화하기

3. 변수 이름 정하기
1) 알파벳, 숫자, 특수문자( _ , $ )
2) 숫자는 변수명 앞에 올 수 없다 ex)123a - X
3) 예약어( if, for ...)는 변수명으로 사용 불가
4) 의미가 있는 단어로 구성 ex) int noOfStudent;
5) 변수명을 구성하는 관례
	- 단어의 시작 문자는 대문자
	- 변수에서는 첫번째 단어에 시작문자는 소문자 ex) int noOfStudent
	- 카멜 표기법
		
	int num_max ( O )
	int 1st ( X )
	int $money ( O )

변수가 저장되는 공간의 특성, 자료형
1. 변수와 메모리
	메모리의 크기(자료형)
	반도체 -> 1, 0
	1, 0으로 표현할 수 있는 최소 단위 1bit
	1bit * 8 = 1byte
	숫자 - 양수, 음수
	1bit - 부호비트(0 - 양수, 1 - 음수)
	7bit - 수치표현
	-2^7 ~ 2^7 - 1
	-128~127
	
	1 byte -> -2^7~2^7 -1
	2 byte -> -2^15~2^15 -1
	4 byte -> -2^31~2^31 -1
	8 byte -> -2^63~2^63 -1
	
	
2. 기본 자료형
	- 공간의 크기가 정해져 있는 자료형
	숫자
		- 정수
				byte = 1byte
				short = 2byte
				int = 4byte
				long = 8byte
				
		- 실수
				float = 4byte
				double = 8byte
		
		- 문자
				char = 2byte, 3byte
					작은 따옴표 ' '
					ex) char ch = 'A';
					
				키보드 A -> 65 변환 -> 2진수 -> 컴퓨터
				
				ASCII -> 문자, 특수문자를 구분하는 숫자 표
				(1byte 범위 문자, 특수문자 정의)
				- 양의 정수(unsigned - 양의 정수)
				0~255(unsigned byte)
				
				- char : 양의 정수(2byte)
				
				- 2바이트 문자로 표현한 숫자 표 = 유니코드
					3바이트 - UTF-8
				
3. 참조 자료형
	

상수와 리터럴
1. 상수 선언하기
final 자료형 변수명;

final = 최총적이다.
- 변경이 불가능한 수
1) 상수의 이름은 변수와 구분하기 위해 관례적으로 대문자로 표기
2) 단어 단어 사이는 _로 구분 EX) MAX_NUM

2. 리터럴

재료가 되는 수, 문자 -> 리터럴 상수

byte (1)
short (2)
int (4)
long (8)

모든 정수는 int -> 각 자료형에 맞게 변경한다

long 값인 경우는 int 범위를 넘어서는 수치를 입력하면 오류 발생
	- long 값을 처음부터 인식할 수 있도록 맨뒤에 L(l) 을 입력한다
	
정수형 자료형 중에 가장 효율적인 자료형은 int다

실수
실수가 정의되면 double -> 다른 자료형 변경
float(4) -> double -> float
double(8)

float 값인 경우는 뒤에 F(f)를 입력한다


형변환
1. 형 변환이란?
기본자료형

	정수형
		1 - byte
		2 - short
		4 - int
		8 - long
	실수형
		4 - float
		8 - double
	문자형
		2 - char(양의 정수)

2. 묵시적 형변환
	작은 자료형 -> 큰 자료형 (자동 형변환)
	
	byte(1) -> short(2) -> int(4) -> long(8) -> float(4) -> double(8)
			  -> char(2) -> 
	char(2) - 양의 정수
	
	실수
	정수.소수점
	
	실수 = 정수 + 소수점 -> 정수보다 표현 범위가 더 넓다
		-> 실수가 정수보다 더 정밀한 숫자
		
	실수에 정수를 대입하면 자동 형변환
	
	
	1) 작은 자료형 -> 큰 자료형 대입
	2) 정수형 자료형 -> 실수형 자료형
	3) 연산 중에도 발생
		- 작은 자료형 -> 큰 자료형으로 자동 형변환
		- 정수 -> 실수 형변환
		
3. 명시적 형변환

	큰 자료형 -> 작은 자료형 : 자료 유실이 발생 가능성이 있다
									  : 자동 형변환 X
									  : 진행 여부를 확인
									  (자료형)
									  
	실수 -> 정수
	
	10.123 -> 10
	
정수, 실수, 문자, 논리형

논리형 - 참, 거짓(true, false)
boolean - 1byte
			- true, false
			
			
기본 자료형 - 초기값 : 변수를 선언만 했을 경우 초기값이 있다

- 정수 = 0
- 실수 = 0.0
- 논리값 = false

- 참조 자료형 = null

주석 - 설명 / 컴파일러가 무시하는 소스

// -> 한줄 주석
/* 
~ 
*/ -> 여러줄 주석

- 소스의 실행 배제