객체 지향 프로그래밍1
객체란? 
Object : 사물, 대상, 상호작용 여부


1. 객체와 객체 지향 프로그래밍

2. 클래스 살펴보기
클래스 - 객체를 만들 수 있는 설계도
- 속성, 메서드 포함 (변수, 함수)

class 클래스명 {
	멤버 변수 정의
	멤버 메서드(함수) 정의
} 

new 연산자
new 클래스명 동일 함수();

마침표 연산자( . )
	-> 변수
	-> 함수();

3. 클래스 이름을 짓는 규칙
1) 알파벳, 숫자
2) 숫자는 앞에X

클래스명
- 단어와 단어의 첫 단어는 대문자 : 관례 -> 파스칼 표기법
ex) class OrderInfo


4. 클래스와 인스턴스

인스턴스(instance) : 실체(실제로 존재한다) : 객체

instanceof 연산자 - ~ 로부터 생성된 객체인가?

5. 패키지란? - 폴더


메서드 - 함수
1. 함수란?
- 수행할 기능을 정의한 코드

2. 함수의 입력과 반환

3. 함수 정의하기

타입 - 자료형
기본자료형 - 문자(String) 숫자 (int)...
참조자료형 - 주소를 가지고 참조하는 class

반환값타입 함수명 (매개변수1, 매개변수2, 매개변수 ....) {

	// 기능을 수행할 코드
	
	return // 반환값;
} 

반환 타입을 정의 / 정의하지 않는 경우 -> void(매개변수X)

ex) 


4. 함수 호출하고 값 반환하기

함수명(값...); 

5. 매개변수 살펴보기
6. 함수 호출과 스택 메모리
- 함수는 호출 -> 연산할 때 변수의 공간이 필요하다
-> 연산이 종료되면 변수공간이 해제된다

- 스택메모리 : 함수 전용 메모리(임시 메모리)

자료 구조
* 스택(stack) - 함수가 스택구조인 이유 
-> main() 안에있는 또 다른 함수가 먼저 실행이 되야되기 때문
-> main() 이 먼저 실행되고 제거되버리면 안에 있는 다른 함수는 실행 될 수 없다.

- 가장 마지막 자료 -> 가장 처음에 꺼낼 수 있는 구조
- 가장 처음 자료 -> 가장 마지막에 꺼낼 수 있는 구조

* 큐(queue)


함수의 코드 수행 부분 -> [함수]지역

* 지역 변수 - 함수가 수행 될 때 공간이 할당되는 변수 -> 수행이 끝나면 필요없다

7. 함수의 장점

8. 클래스 기능을 구현하는 메서드

자바의 이름 짓기 규약
- 클래스 이름
- 메서드 및 멤버변수
- 패키지 이름
- 상수명


클래스와 인스턴스
* 클래스 - 객체를 생성하기 위한 설계도
* 메모리 - 객체를 생성하기 위해 필요한 재료

1. 클래스 사용과 main(), 함수
-> 모든 애플리케이션의 시작 함수

2. new 예약어로 클래스 생성하기
3. 인스턴스와 참조 변수

인스턴스(객체) 전용 메모리 - 힙 영역 메모리


* 스택 메모리 영역에 있는 s1 변수는 힙 메모리영역에 있는 id, name, subject 의 주소를 가지고 있다.
* 힙 메모리 영역 
					
		스택 메모리	(주소참조) ->	힙 메모리
ex)	          s1,s2 ...	 					int id;  - 4byte
											String name; - 4byte
											String subject; - 4byte

참조 자료형은 4byte면 충분(주소값)


4. 참조 변수와 참조 값
클래스 형태 자료형 -> 참조 자료형

참조값 : 주소 값 

생성자
- 클래스명과 동일한 함수명
- 객체를 생성하는 역할 (힙 메모리)
- 객체의 주소값 반환

- 생성자 메서스를 정의하지 않으면 -> 컴파일러가 기본 생성자를 추가한다.
- 생성자 : 반환값 타입 정의X
					-> 변경 불가(객체의 주소값으로 고정)
					-> return 키워드 사용 불가

Student s1 = new Student(); - 힙 메모리에 객체 생성


함수 시그니쳐
반환값 + 함수명 + 매개변수

함수의 시그니쳐가 다르면 다른 함수

함수의 시그니쳐가 같으면 중복 정의 -> 오류 발생

메서드 오버로드
-> 함수의 반환값이나, 매개변수를 달리하여 여러개 정의