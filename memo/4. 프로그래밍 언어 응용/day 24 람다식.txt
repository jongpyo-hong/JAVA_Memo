람다식(Lambda expression)
1. 람다식이란?
	- 메서드를 하나의 식으로 표현
	- 함수형 프로그래밍
	
1) 함수는 단일기능
2) 함수는 값이다 (java는 함수가 값이 아니다)
	- 함수를 매개변수, 반환값으로 사용 할 수 있다

	- java는 함수가 실행문일 뿐이다, 절대로 값으로 사용 할 수 없다
	- 인터페이스가 객체가 되는 조건은 함수가 객체가 되어야 한다

2. 람다식 문법 살펴보기

3. 람다식 사용하기
ex) Calculator cal = (a, b) -> a + b;

4. 함수형 인터페이스(Functional Interface)

- 함수형 인터페이스 형식을 체크한다 (에너테이션 @FunctionalInterface)
- 단일기능 -> 하나의 추상 메서드만 정의한다
-----------------------------------------------------------------------------------
java.util.function패키지

1. 주요 함수형 인터페이스
	- Lambda식을 사용하는 인터페이스

1-1) 반환값이 있지만 매개변수가 없는 형태
	- Supplier<R> : R get();
	
1-2) 반환값이 없고 매개변수가 있는 형태
	- Consumer<T> : void accept(T t);
	
1-3) 반환값과 매개변수 1개가 있는 형태
	- Function<T, R> : R apply(T t);

1-4) 반환값이 boolean, 매개변수 1개가 있는 형태
	- Predicate<T> : boolean test(T t);

1-5) 매개변수와 반환값이 모두 같은 자료형인 형태
UnaryOperator<T> : Function<T>
	- T apply(T t, T t)
	
2) 매개변수가 2개일때 - Bi를 앞에 붙인다

2-1) BiConsumer<T, U> : void accept(T t, U u);
	- 매개변수가 2개, 반환값이 없다

2-2) BiFunction<T,U,R> : R apply(T t, U u);
	- 매개변수가 2개, 반환값이 있다

2-3) BiPredicate<T, U> : boolean test(T t, U u);
	- 매개변수가 2개, 반환값이 boolean

2-4) BinaryOperator<T> : BiFunction<T, T, T> ->T apply(T t, T t)
	- 반환값, 매개변수 2개가 모두 같은 자료형
---------------------------------------------------------------------------------------------------
	
2. 기본형 사용 함수형 인터페이스
	- 매개변수와 반환값의 타입이 모두 제네릭 타입이다.
	IntToLongFunction : int applyAsInt(T value)
		- ToBFunction은 출력 타입이 B타입이다. 입력은 지네릭 타입
		
---------------------------------------------------------------------------------------------------

3. Function의 합성
	- andThen() : func1.andThen(func2)
					- 함수1에 함수2를 더한다

	- compose() : func2.andThen(func1)
					- 함수2를 함수1에 더한다
	
	- identity() : 항등 함수(매개변수 == 반환값)
			x -> x

---------------------------------------------------------------------------------------------------

4. Predicate의 결합(조건식 함수의 결합, 참과 거짓의 판별)
	- .and() 조건식 함수1 && 조건식 함수2 
	- .or() 조건식 함수1 || 조건식 함수2 
	- .negate() 조건식 함수가 거짓일 경우

-------------------------------------------------------------------------------------------------------
5. 메서드 참조
	- 람다식을 더욱 간결하게 표현할 수 있다.
	- 람다식이 하나의 메서드만 호출하는 경우에는 메서드 참조(method reference)
	   라는 방법으로 람다식을 간결하게 할 수 있다.
	- 하나의 메서드만 호출하는 람다식은 클래스이름::메서드이름 
	   또는 참조변수::메서드이름으로 바꿀 수 있다.
	