컬렉션 프레임워크
(Collection Framework)

컬렉션(Collection)
	- 데이터 군 : 많은 데이터
	- 자료
	
프레임워크(Framework)
	- 표준화된 설계의 틀
	
	
데이터군을 다루는데 표준화된 설계의 틀

- 표준화의 기준 -> 자료(data) 구조

	Collection 인터페이스
	
			1) 순차 자료 구조
				 List 인터페이스
					- 순서가 있는 자료
					- 중복이 허용되는 자료
			
			2) 집합 자료 구조
				 Set 인터페이스
					- 중복이 없는 자료
					- 순서 유지 X
	
	3) 사전 자료 구조
		 Map 인터페이스
			- 키와 값의 쌍 구조
			- 키 : 값을 조회하기 위한 용도, 중복을 허용하지 않는다(Set형태의 자료)
			- 값 : 중복을 허용한다(Collection ...)
			
			

1. 컬렉션 프레임워크 핵심 인터페이스
E - element (요소)

---------------------------------------------------------------------------------------------------------------------------------

2. Collection인터페이스

	2-1. List 인터페이스
		add(E e) - 추가
		add(int index, E e)
		E get(int index) - 조회		
		E remove(int index) - 삭제
		remove(Object e) 		
		contains(...)		
		set(int index, E e) 
		int size() : 요소(element)의 개수
		
		구현 클래스
			ArrayList : 배열
				- 물리적 배열
				- 장점 : 조회 속도가 매우 빠르다
				- 단점 : 앞이나 중간에 있는 데이터 추가, 수정, 삭제시
								-> 물리적 배열이 계속 생성된다(성능저하)
				- 요소 제거시 앞에서부터 제거하면 배열 제거시 마다 새로 배열이 생성되므로 제대로 제거X
				- 뒤에서 부터 제거해야된다 : 스택 구조와 비슷하다
			
			LinkedList
				- 요소 요소의 주소 연결 -> 순서 결정
				- 장점 : 요소의 추가, 수정, 삭제가 매우 빠르다
				- 단점 : 조회 속도는 ArrayList보다 느리다
			
				- Queue 인터페이스의 구현체 (Queue :  한쪽 끝에서만 삽입, 다른 한쪽 끝에서는 삭제 연산만 가능한 유한 순서 리스트.)
					.offer() : 배열에 ("") 추가
					.poll() : 배열에 들어간 항목을 들어갔던 순서대로 리턴한다
					
			Stack	- .push() : 배열에 ("")추가
					- .pop() : 배열의 마지막에 추가된 항목을 꺼내서 반환
			Vector

	2-2. Set 인터페이스
		- add(E e)
		- remove(Object e)
		- contains(Object e)
		- size() ..
		
		* Set인터페이스는 중복이 없다
		
		구현 클래스
			- HashSet : 배열을 만들었을 때 내부에서 검색을 용이하게 정렬한다
			
			- TreeSet : Set + 정렬추가 - 숫자(Integer)면 음수, 작은 수 부터 정렬한다 (Comparable)기준
		
		정렬 기준
			java.lang.Comparable<T>
					int compareTo<T o>
			
			대안적인 정렬기준 
				java.util.Comparator 인터페이스
				
---------------------------------------------------------------------------------------------------------------------------------


3. Map 인터페이스
	V put(K k, V v) : 추가, 수정
	V get(Object k) : 조회
	V remove(Object k) : 제거
	boolean containsKey(Object key)
	boolean containsValue(Object values)
	
	Set<K> keySet : 모든 키값 - 키는 중복이 불가능(Set)
	Collection<V> values() : 모든 값 - 값은 중복 가능(Collection)
	
	
	구현 클래스
		- HashMap
		
		- TreeMap : Map + 키값의 정렬
		
		
		

- toString 메서드가 재정의 되있다 : 요소의 내용


---------------------------------------------------------------------------------------------------------------------------------



4. Stack과 Queue


5. Iterator, Listlterator, Enumeration - 반복자

	Iterator<E>
		- boolean hasNext() : 다음 요소가 있는지 체크
		- E next() : 다음 요소 추출
	
	ListIterator
		- List 인터페이스에 정의되있다
		- hasPrevious() : 이전 요소가 있는지 체크
		- E previous() : 이전 요소 추출
		- Iterator<E>에 없는 기능이 추가되어있다
		
	Enumeration <E>
		- boolean hasMoreElements() : 다음 요소가 있는지 체크
		- E nextElement() : 다음 요소 추출
		
-------------------------------------------------------------------------------------------------------------------
6. java.util
		
6-1) Arrays : 배열 편의기능
	
	asList 
	
	deepToString - 다차원 배열을 문자열로
	
	deepHashCode - 다차원 배열의 주소값
	
	fill - 배열을 매개변수로 채운다
	
	mismatch - 배열이 같은지 확인
	
	sort - 배열 정렬
					


6-2) Collections : 컬렉션의 편의기능

	- addAll(..., b) : 배열에 b(복수의 값)을 추가
	
	- checkedList
	
	- fill(..., b) : 지정한 배열의 값을 b의 값으로 채운다
	
	- max()
	
	- min()
	
	- rotate(..., b) : 배열안의 값을 b만큼 이동시킨다
	
	- shuffle() : 배열안의 값을 무작위로 섞는다
	
	- swap(..., a, b) : 배열의 a와 b의 위치를 바꾼다

--------------------------------------------------------------------------------------------------------------------

