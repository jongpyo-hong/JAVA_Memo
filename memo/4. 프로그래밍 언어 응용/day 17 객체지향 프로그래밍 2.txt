객체지향 프로그래밍 1

생성자
- 객체를 생성할 수 있는 역할을 가지고 있는 메서드

1. 디폴트 생성자(기본 생성자)
	- 생성자가 아무것도 정의 안된경우 -> 컴파일러가 자동으로 추가해주는 생성자
	- 구현 코드 X, 매개변수 X

2. 생성자 오버로드
- 함수의 시그니쳐
	- 반환값 자료형 + 함수명 + 매개변수

3. 참조 자료형
	- 기본 자료형
		- int
	- 참조 자료형
		- class
		
인스턴스(instance)  : 객체

		
정보 은닉
1. 접근 제어자

1) public : 내부, 외부 패키지에 상관없이 전부 접근 가능
2) protected : 동일 패키지에서만 접근 가능(default)
					- 외부 패키지인 경우 상속을 통해서 클래스 내부에서 접근가능(private)
					- default + private
3) default : 접근 제어자를 입력하지 않을 때 - 동일 패키지 에서만 접근가능
4) private : 클래스 내부에서만 접근 가능, 클래스 외부X

- 멤버 변수 : 통제 불가 -> private
- 멤버 변수의 값을 지정하고, 조회 별도의 메서드를 정의


2. get(), set() 메서드 // 멤버변수의 통제를 위해서 사용한다, 정보를 전달하기 위한 클래스
- getter, setter
- 멤버변수의 값을 지정하고 조회
- getXXX()
- setXXX(...)

3. 정보은닉이란?

this 예약어 - 모든 인스턴스 변수에 담겨있는 지역변수
1) 지역변수 
	- 생성될 객체의 참조 주소값을 가지고 있는 지역변수
	- 멤버(인스턴스) 메서드의 지역 변수
	- 클래스 내에만 있다(함수 밖을 빠져나올수 없다 - 지역변수)

2) 메서드
	- this(), this(.....)
	- 생성자 메서드 : 클래스 내부에서만 사용 가능한 생성자 메서드

static 변수, 메서드

static = 정적인(고정된, 움직이지 않는)
static 변수 : 정적인 메모리에 있는 변수 - 클래스 로더에 의해 데이터 영역에 올라갈때 이미 공간을 할당받는다

static 메서드 

정적 메모리 - 데이터 영역 

동적 메모리 - 스택 영역, 힙 영역


1. 클래스 변수
2. 클래스 메서드
- 지역 변수인 this가 존재하지 않는다
- this를 통해서 접근할 수 있는 인스턴스 자원을 사용할 수 없다
- 처음부터 활성화 되어있는 정적 변수, 정적 메서드는 사용 가능하다


인스턴스 메서드(멤버 메서드)
	- this, this의 인스턴스 자원 사용가능
	- 정적 자원은 접근 가능하다
	- 인스턴스 자원(생성되는 객체) 보다 먼저 존재하기 때문

변수의 유효범위
1. 지역변수
2. 멤버변수 (인스턴스 변수)
3. static 변수


static 응용 - 싱글톤 패턴
- 객체를 한개만 만들어서 공유
