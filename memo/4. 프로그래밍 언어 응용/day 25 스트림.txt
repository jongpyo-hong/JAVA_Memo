스트림(Stream)
java.util.stream 패키지

1. 처리의 통일성
	배열, 컬렉션이든 스트림으로 변환하면 동일한 방식으로 Stream에 지원되는 기능으로 처리가능
	
2. 원본 데이터는 유지한다

3. 스트림은 일회용(다시 실행하려면 스트림을 다시 생성한다)

4. 스트림은 반복문을 사용하지 않는다(내부 반복 지원)


스트림이란?
- 데이터 소스(배열, 컬렉션)가 무엇이든 간에 동일한 방식으로 다룰수 있는 추상화
- 코드의 재사용성 중대
- 스트림은 데이터 소스를 변경하지 않는다
- 스트림은 일회용이다.
- 스트림은 작업을 내부 반복으로 처리한다.

----------------------------------------------------------------------------------------------------------
스트림의 연산 
1. 중간연산
	- 반환값이 Stream인 연산
	- 메서드 체이닝이 가능하다
	- 진행할 작업에 대한 나열
	- 연산은 최종 연산이 호출되어야 진행된다
		(지연된 연산)
		
	
2. 최종연산
	- 반환값이 Stream이 아닌 연산
	- 스트림을 최종 소비하고 연산 결과를 도출한다

3. 지연된연산
4. 기본 자료형을 다루는 스트림

기본 자료형 스트림
	Stream<T> : 일반 자료형 스트림
	IntStream : int 자료형 스트림
	- 기본 자료형을 직접 다룬다(언박싱이 발생하지 않는다 - 연산 효율 증가)
	- 숫자와 관련된 기능이 추가 되있다(통계 관련)

------------------------------------------------------------------------------------------------------------
스트림 만들기
1. 컬렉션
	Collection 인터페이스
		Stream<T> stram()
2. 배열
		Arrays.stream(...)
		
3. 특정 범위의 정수
	- range(a, b) : a이상 b미만의 IntStream
	- rangeClosed(a, b) : a이상 b이하의 IntStream
	
4. 임의의 수
	java.util.Random
		Stream limit(갯수) : 스트림의 갯수 제한

5. 람다식 
	- iterate() - 스트림 증가식
	- generate() - 스트림 반복

6. 빈 스트림

7. 두 스트림의 연결 - concat()
	-> 두 스트림을 결합해서 하나의 새로운 스트림 생성
	
-----------------------------------------------------------------------------------------------------------
스트림의 중간 연산
1. 스트림 요소 걸러내기
- filter() - 걸러내기(Predicate가 매개변수 - 참, 거짓 반환)

- distinct() - 중복제거 // 동등성 비교로 주소값(hashCode(), equals())을 비교해 같으면 중복제거

2. 정렬 - sorted()

3. 변환 - map()

4. 조회 - peek()

5. mapToInt(), mapToLong(), mapToDouble()
- 기본형 스트림은 숫자를 다루는 편리한 메서드를 제공

6. Optional
	